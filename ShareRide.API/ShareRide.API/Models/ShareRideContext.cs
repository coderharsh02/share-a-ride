// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ShareRide.API.Models
{
    public partial class ShareRideContext : DbContext
    {
        public ShareRideContext()
        {
        }

        public ShareRideContext(DbContextOptions<ShareRideContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Feedbacks> Feedbacks { get; set; }
        public virtual DbSet<RideRequests> RideRequests { get; set; }
        public virtual DbSet<RideStops> RideStops { get; set; }
        public virtual DbSet<Rides> Rides { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Vehicles> Vehicles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Feedbacks>(entity =>
            {
                entity.HasKey(e => e.FeedbackId);

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.IstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ist_date");

                entity.Property(e => e.IstIp)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ist_ip");

                entity.Property(e => e.IstUser).HasColumnName("ist_user");

                entity.HasOne(d => d.FromUser)
                    .WithMany(p => p.FeedbacksFromUser)
                    .HasForeignKey(d => d.FromUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Feedbacks_Users");

                entity.HasOne(d => d.Ride)
                    .WithMany(p => p.Feedbacks)
                    .HasForeignKey(d => d.RideId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Feedbacks_Rides");

                entity.HasOne(d => d.ToUser)
                    .WithMany(p => p.FeedbacksToUser)
                    .HasForeignKey(d => d.ToUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Feedbacks_Users1");
            });

            modelBuilder.Entity<RideRequests>(entity =>
            {
                entity.HasKey(e => e.RequestId);

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.LstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lst_date");

                entity.Property(e => e.LstIp)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("lst_ip");

                entity.Property(e => e.LstUser).HasColumnName("lst_user");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Ride)
                    .WithMany(p => p.RideRequests)
                    .HasForeignKey(d => d.RideId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RideRequests_Rides");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RideRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RideRequests_Users");
            });

            modelBuilder.Entity<RideStops>(entity =>
            {
                entity.HasKey(e => e.StopId);

                entity.Property(e => e.LstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lst_date");

                entity.Property(e => e.LstIp)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("lst_ip");

                entity.Property(e => e.LstUser).HasColumnName("lst_user");

                entity.Property(e => e.StopDetails)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StopName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Ride)
                    .WithMany(p => p.RideStops)
                    .HasForeignKey(d => d.RideId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RideStops_Rides");
            });

            modelBuilder.Entity<Rides>(entity =>
            {
                entity.HasKey(e => e.RideId);

                entity.Property(e => e.Destination)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lst_date");

                entity.Property(e => e.LstIp)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("lst_ip");

                entity.Property(e => e.LstUser).HasColumnName("lst_user");

                entity.Property(e => e.Origin)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TotalSeats)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Rides)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rides_Users");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.Rides)
                    .HasForeignKey(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rides_Vehicles");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lst_date");

                entity.Property(e => e.LstIp)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("lst_ip");

                entity.Property(e => e.LstUser).HasColumnName("lst_user");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pincode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vehicles>(entity =>
            {
                entity.HasKey(e => e.VehicleId);

                entity.Property(e => e.LstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lst_date");

                entity.Property(e => e.LstIp)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("lst_ip");

                entity.Property(e => e.LstUser).HasColumnName("lst_user");

                entity.Property(e => e.VehicleDetails)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleImageUrl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleModel)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_Users");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}